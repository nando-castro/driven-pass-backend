generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id             Int      @id @default(autoincrement())
  title          String
  userId         Int
  numero         String   @unique @db.VarChar
  cardholderName String   @unique @db.VarChar(50)
  password       String   @db.VarChar
  securityCode   String   @db.VarChar
  expirationDate String   @db.VarChar(20)
  isVirtual      Boolean
  type           CardType
  createdAt      DateTime @default(now()) @db.Timestamptz()
  User           User     @relation(fields: [userId], references: [id])

  @@map("cards")
}

model Credential {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  url       String   @db.VarChar
  userName  String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz()
  User      User     @relation(fields: [userId], references: [id])

  @@map("credentials")
}

model Document {
  id             Int          @id @default(autoincrement())
  userId         Int
  title          String
  type           DocumentType
  name           String       @db.VarChar(255)
  issueDate      String       @db.VarChar(255)
  validity       String       @db.VarChar(255)
  registerNumber String       @db.VarChar(255)
  issuer         String       @db.VarChar(255)
  createdAt      DateTime     @default(now()) @db.Timestamptz()
  User           User         @relation(fields: [userId], references: [id])

  @@map("documents")
}

model Network {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  name      String   @db.VarChar(255)
  password  String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamptz()
  User      User     @relation(fields: [userId], references: [id])

  @@map("networks")
}

model Note {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  text      String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @db.Timestamptz()
  User      User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  User      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar
  password   String       @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz()
  Card       Card[]
  Credential Credential[]
  Network    Network[]
  Note       Note[]
  Session    Session[]
  Document   Document[]

  @@map("users")
}

enum CardType {
  credit
  debit
  debit_credit
}

enum DocumentType {
  rg
  cnh
}
